function [v_new,c] = vfi_iteration_implicit(v0,param,num,grid)
% implement the algorithm in the slides.

v_old = v0;

% Perform the upwind scheme.
[Vp_upwind,sf,sb] = vp_upwind(v_old,param,num,grid);


% Infer consumption from Va_Upwind
c = Vp_upwind.^(-1);
u = utility(c);

%% Derive the transition matrix (borrowed from Ben Moll's codes)

% define 
X = - min(sb,0)/da;
Y = - max(sf,0)/da + min(sb,0)/da;
Z = max(sf,0)/da;

A1=spdiags(Y,0,num.a_n,num.a_n)+spdiags(X(2:num.a_n),-1,num.a_n,num.a_n)+spdiags([0;Z(1:num.a_n-1)],1,num.a_n,num.a_n);
A = [A1,sparse(num.a_n,num.a_n);sparse(num.a_n,num.a_n),A2] ;

B = (rho + 1/Delta)*speye(num.a_n) - A;

b = u + v_old/Delta;
V_stacked = B\b; %SOLVE SYSTEM OF EQUATIONS

V = [V_stacked(1:num.a_n),V_stacked(I+1:2*I)];


end